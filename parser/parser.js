// Generated by CoffeeScript 1.10.0
(function() {
  var DescriptionParser, DescriptionParserResult, IgnoreRegion, S, ShortCut, TimeItem, WorkDayParser, WorkDayParserResult, WorkDayParserSettings, WorkItem, WorkItemTemp, _, dp, spu, util;

  _ = require('lodash');

  S = require('string');

  WorkItem = require('./workitem');

  TimeItem = require('./timeitem');

  ShortCut = require('./shortcut');

  WorkDayParserSettings = require('./workdayparsersetting');

  util = require('./stringparserutils');

  spu = util.spu;

  IgnoreRegion = util.ir;

  dp = require('./descriptionparser');

  DescriptionParser = dp.DescriptionParser;

  DescriptionParserResult = dp.DescriptionParserResult;

  WorkDayParser = (function() {
    var automaticPauseDeactivation, dayStartSeparator, endTimeStartChar, hourProjectInfoSeparator, itemSeparator, pauseChar, projectPositionSeparator, settings;

    dayStartSeparator = ',';

    hourProjectInfoSeparator = ';';

    itemSeparator = ',';

    endTimeStartChar = '-';

    pauseChar = '!';

    projectPositionSeparator = '-';

    automaticPauseDeactivation = "//";

    settings = null;

    function WorkDayParser(settings1) {
      this.settings = settings1;
    }

    WorkDayParser.instance = function() {};

    WorkDayParser.prototype.parse = function(userInput, wdToFill, insertMetaData) {
      var dayStartTime, error, i, ignoreBreakSettings, j, len, len1, parts, ref, ref1, ref2, ref3, remainingString, resultList, ret, success, tmpList, wdItemString, wdItemsAsString, wholeDayShortcut, workItem;
      if (insertMetaData == null) {
        insertMetaData = false;
      }
      this.insertMetaData = insertMetaData;
      console.log("Input: " + userInput);
      userInput = S(userInput).replaceAll('\n', '').s;
      ref = this.preProcessWholeDayExpansion(userInput, wdToFill.dateTime()), userInput = ref[0], wholeDayShortcut = ref[1];
      ignoreBreakSettings = userInput.startsWith(automaticPauseDeactivation);
      if (ignoreBreakSettings) {
        userInput = userInput.substring(2);
      }
      ret = new WorkDayParserResult();
      if (!S(userInput).isEmpty()) {
        ref1 = this.getDayStartTime(userInput), dayStartTime = ref1[0], remainingString = ref1[1], success = ref1[2], error = ref1[3];
        console.log("Startzeit: " + dayStartTime.hour + ":" + dayStartTime.minute + " S: " + success + " E: " + error);
        if (dayStartTime) {
          parts = spu.splitWithIgnoreRegions(remainingString, [itemSeparator], new IgnoreRegion('(', ')'));
          console.log("PARTS: " + parts[0] + " + " + parts[1]);
          wdItemsAsString = _.filter(parts, function(p) {
            return !S(p).isEmpty();
          });
          console.log("Split String: " + wdItemsAsString);
          if (_.any(wdItemsAsString)) {
            tmpList = [];
            for (i = 0, len = wdItemsAsString.length; i < len; i++) {
              wdItemString = wdItemsAsString[i];
              console.log("Cur In Str: " + wdItemString);
              ref2 = this.getWDTempItem(wdItemString, wdToFill.dateTime(), wholeDayShortcut), workItem = ref2[0], success = ref2[1], error = ref2[2];
              if (workItem != null) {
                console.log("Push to tmpList: " + (JSON.stringify(workItem)));
                tmpList.push(workItem);
              } else {
                console.log("Strange Error 123");
                ret.error = error;
                ret.success = false;
              }
            }
            console.log("Temp List: " + (JSON.stringify(tmpList)));
            resultList = [];
            ref3 = this.processTempWorkItems(dayStartTime, tmpList, ignoreBreakSettings), resultList = ref3[0], success = ref3[1], error = ref3[2];
            console.log("Result list: " + (JSON.stringify(resultList)));
            console.log("Result 1: " + (JSON.stringify(resultList[0])));
            console.log("Result 2: " + (JSON.stringify(resultList[1])));
            console.log("Result 3: " + (JSON.stringify(resultList[2])));
            console.log("Result 4: " + (JSON.stringify(resultList[3])));
            console.log("Error:" + error);
            console.log("WorkDayObject: " + (JSON.stringify(wdToFill)));
            if (_.any(resultList)) {
              wdToFill.clear();
              for (j = 0, len1 = resultList.length; j < len1; j++) {
                workItem = resultList[j];
                wdToFill.addWorkItem(workItem);
              }
              ret.success = true;
            } else {
              ret.error = error;
            }
          } else {
            ret.success = true;
            ret.error = "Noch keine EintrÃ¤ge gemacht";
          }
        } else {
          ret.error = error;
        }
      } else {
        console.log("Input empty");
        ret.error = "Noch keine Eingabe";
      }
      return ret;
    };

    WorkDayParser.prototype.preProcessWholeDayExpansion = function(userInput, dateTime) {
      var currentShortcuts, dic;
      if (this.settings != null) {
        currentShortcuts = this.settings.getValidShortCuts(dateTime);
        console.log("==========");
        console.log(JSON.stringify(this.settings));
        console.log(JSON.stringify(currentShortcuts));
        if (_.any(currentShortcuts, function(sc) {
          return sc.wholeDayExpansion;
        })) {
          dic = _(currentShortcuts).filter(function(sc) {
            return sc.wholeDayExpansion;
          }).first(function(sc) {
            return sc.key === userInput;
          }).value()[0];
          if (dic != null) {
            return [dic.expansion, dic];
          }
        }
      }
      return [userInput, null];
    };

    WorkDayParser.prototype.processTempWorkItems = function(dayStartTime, tmpList, ignoreBreakSettings) {
      var currentEndTime, e, endTimeMode, error, error1, i, lastTime, len, ref, resultList, resultListTmp, success, workItem, workItemTemp;
      success = false;
      error = '';
      resultListTmp = [];
      lastTime = dayStartTime;
      for (i = 0, len = tmpList.length; i < len; i++) {
        workItemTemp = tmpList[i];
        try {
          if (workItemTemp.isPause) {
            if (workItemTemp.desiredEndtime != null) {
              lastTime = workItemTemp.desiredEndtime;
            } else {
              lastTime = lastTime.add(workItemTemp.hourCount);
            }
          } else {
            endTimeMode = false;
            if (workItemTemp.desiredEndtime != null) {
              currentEndTime = workItemTemp.desiredEndtime;
              endTimeMode = true;
            } else {
              currentEndTime = lastTime.add(workItemTemp.hourCount);
            }
            if (((ref = this.settings) != null ? ref.insertDayBreak : void 0) && !ignoreBreakSettings) {
              if (this.settings.dayBreakTime.is_between(lastTime, currentEndTime)) {
                workItem = new WorkItem(lastTime, this.settings.dayBreakTime, workItemTemp.projectString, workItemTemp.posString);
                if (this.insertMetaData) {
                  workItem.description = workItemTemp.description;
                  workItem.originalString = workItemTemp.originalString;
                  workItem.shortCut = workItemTemp.shortCut;
                }
                resultListTmp.push(workItem);
                lastTime = this.settings.dayBreakTime.add(this.settings.dayBreakDurationInMinutes / 60);
                if (!endTimeMode) {
                  currentEndTime = currentEndTime.add(this.settings.dayBreakDurationInMinutes / 60);
                }
              } else if (this.settings.dayBreakTime.is_equal(lastTime)) {
                lastTime = lastTime.add(this.settings.dayBreakDurationInMinutes / 60);
                if (!endTimeMode) {
                  currentEndTime = currentEndTime.add(this.settings.dayBreakDurationInMinutes / 60);
                }
              }
            }
            workItem = new WorkItem(lastTime, currentEndTime, workItemTemp.projectString, workItemTemp.posString);
            if (this.insertMetaData) {
              workItem.description = workItemTemp.description;
              workItem.originalString = workItemTemp.originalString;
              workItem.shortCut = workItemTemp.shortCut;
            }
            resultListTmp.push(workItem);
            lastTime = currentEndTime;
            success = true;
          }
        } catch (error1) {
          e = error1;
          error = "Beim Verarbeiten von " + workItemTemp.originalString + " ist dieser Fehler aufgetreten: " + e;
          success = false;
        }
      }
      resultList = resultListTmp;
      return [resultList, success, error];
    };

    WorkDayParser.prototype.getWDTempItem = function(wdItemString, dateTime, wholeDayShortcut) {
      var abbrevString, abbrevStringNoComment, desc, descExpanded, descNoExpand, error, expanded, hours, parts, pauseDuration, posReplaceString, projectPosDescString, projectPosString, shortCut, success, test, ti, timeString, workItem, workItemshortCut;
      success = false;
      workItem = null;
      error = '';
      if (S(wdItemString).endsWith(pauseChar)) {
        if (S(wdItemString).startsWith(endTimeStartChar)) {
          ti = TimeItem.parse(wdItemString.substring(1, wdItemString.length - 1));
          if (ti != null) {
            workItem = new WorkItemTemp(wdItemString);
            workItem.desiredEndtime = ti;
            workItem.isPause = true;
            success = true;
          }
        } else {
          pauseDuration = parseFloat(wdItemString.substring(0, wdItemString.length - 1));
          workItem = new WorkItemTemp(wdItemString);
          workItem.hourCount = pauseDuration;
          workItem.isPause = true;
          success = true;
        }
      } else {
        timeString = spu.token(wdItemString, hourProjectInfoSeparator, 1, wdItemString).trim();
        if (!S(timeString).isEmpty()) {
          if (S(timeString).startsWith(endTimeStartChar)) {
            ti = TimeItem.parse(timeString.substring(1));
            if (ti != null) {
              workItem = new WorkItemTemp(wdItemString);
              workItem.desiredEndtime = ti;
            } else {
              error = string.Format("Die Endzeit kann nicht erkannt werden: " + timeString);
            }
          } else {
            hours = parseFloat(timeString);
            workItem = new WorkItemTemp(wdItemString);
            workItem.hourCount = hours;
          }
          if (workItem != null) {
            projectPosDescString = wdItemString.substring(wdItemString.indexOf(hourProjectInfoSeparator) + 1).trim();
            if (!S(projectPosDescString).isEmpty()) {
              if (this.settings != null) {
                abbrevStringNoComment = spu.tokenReturnInputIfFail(projectPosDescString, "(", 1).trim();
                abbrevString = spu.tokenReturnInputIfFail(abbrevStringNoComment, "-", 1).trim();
                posReplaceString = spu.token(abbrevStringNoComment, "-", 2).trim();
                shortCut = _.chain(this.settings.getValidShortCuts(dateTime)).filter(function(s) {
                  return !s.wholeDayExpansion;
                }).filter(function(s) {
                  return s.key === abbrevString;
                }).value();
                if ((shortCut != null) && _.any(shortCut)) {
                  workItem.shortCut = shortCut[0];
                  expanded = shortCut[0].expansion;
                  desc = DescriptionParser.parseDescription(projectPosDescString);
                  descExpanded = DescriptionParser.parseDescription(expanded);
                  if (!S(desc.description).isEmpty() && desc.usedAppendDelimiter) {
                    expanded = descExpanded.beforeDescription + "(" + descExpanded.description + desc.description + ")";
                  } else if (!S(desc.description).isEmpty()) {
                    test = this.replacePosIfNecessary(descExpanded.beforeDescription, posReplaceString);
                    expanded = test + "(" + desc.description + ")";
                  } else {
                    expanded = this.replacePosIfNecessary(expanded, posReplaceString);
                  }
                  projectPosDescString = expanded;
                } else if (wholeDayShortcut != null) {
                  workItemshortCut = wholeDayShortcut;
                }
              }
              projectPosString = spu.tokenReturnInputIfFail(projectPosDescString, "(", 1);
              parts = _.map(projectPosString.split(projectPositionSeparator), function(s) {
                return s.trim();
              });
              if (_.any(parts)) {
                workItem.projectString = parts[0];
                workItem.posString = parts[1] ? parts[1] : '';
                success = true;
              } else {
                error = "Projektnummer kann nicht erkannt werden: " + projectPosDescString;
              }
              descNoExpand = DescriptionParser.parseDescription(projectPosDescString);
              if (!S(descNoExpand.description).isEmpty()) {
                workItem.description = descNoExpand.description;
              }
            } else {
              error = "Projektnummer ist leer: " + wdItemString;
            }
          }
        } else {
          error = "Stundenanzahl kann nicht erkannt werden: " + wdItemString;
        }
      }
      return [workItem, success, error];
    };

    WorkDayParser.prototype.replacePosIfNecessary = function(bevoreDes, posReplacement) {
      if (!S(posReplacement).isEmpty()) {
        return spu.token(bevoreDes, "-", 1, bevoreDes) + "-" + posReplacement;
      }
      return bevoreDes;
    };

    WorkDayParser.prototype.getDayStartTime = function(input) {
      var dayStartTime, dayStartToken, error, remainingString, success;
      success = false;
      dayStartToken = spu.token(input, dayStartSeparator, 1, input);
      if (!S(dayStartToken.trim()).isEmpty()) {
        dayStartTime = TimeItem.parse(dayStartToken);
        if (dayStartTime != null) {
          remainingString = dayStartToken.length < input.length ? input.substring(dayStartToken.length + 1) : '';
          error = '';
          success = true;
        } else {
          remainingString = input;
          error = "Tagesbeginn wird nicht erkannt: " + dayStartToken;
        }
      } else {
        error = "no daystart found";
        dayStartTime = null;
        remainingString = input;
      }
      return [dayStartTime, remainingString, success, error];
    };

    WorkDayParser.prototype.addCurrentTime = function(originalString) {
      var newString;
      newString = originalString;
      if (S(originalString).isEmpty()) {
        newString += TimeItem.now.to_string();
      } else {
        if (!S(originalString).endsWith(itemSeparator)) {
          newString += itemSeparator;
        }
        newString += endTimeStartChar + TimeItem.now.to_string();
      }
      return newString;
    };

    return WorkDayParser;

  })();

  WorkDayParserResult = (function() {
    function WorkDayParserResult() {
      this.success = false;
      this.error = '';
    }

    return WorkDayParserResult;

  })();

  WorkItemTemp = (function() {
    function WorkItemTemp(originalString1) {
      this.originalString = originalString1;
    }

    WorkItemTemp.prototype.isPause = false;

    WorkItemTemp.prototype.hourCount = 0;

    WorkItemTemp.prototype.desiredEndtime = null;

    WorkItemTemp.prototype.projectString = null;

    WorkItemTemp.prototype.posString = null;

    WorkItemTemp.prototype.description = "";

    WorkItemTemp.prototype.originalString = null;

    WorkItemTemp.prototype.shortCut = null;

    WorkItemTemp.prototype.toString = function() {
      return "WorkItemTemp: isPause:" + this.isPause + ", hourCount:" + this.hourCount + ", desiredEndtime:" + this.desiredEndtime + ", projectString:" + this.projectString + ", posString:" + this.posString + ", description:" + this.description + ", originalString:" + this.originalString + ", shortCut:" + this.shortCut;
    };

    return WorkItemTemp;

  })();

  module.exports = WorkDayParser;

}).call(this);
