// Generated by CoffeeScript 1.10.0
(function() {
  var IgnoreRegion, S, StringParserUtils, _,
    slice = [].slice;

  _ = require('lodash');

  S = require('string');

  StringParserUtils = (function() {
    function StringParserUtils() {}

    StringParserUtils.token = function(s, separator, token, fallback) {
      var idx, tokens;
      if (fallback == null) {
        fallback = '';
      }
      if (!S(s).isEmpty() && S(s).contains(separator)) {
        tokens = s.split(separator);
        if (token > 0) {
          idx = token - 1;
          if (idx < tokens.length) {
            return tokens[idx];
          }
        } else if (token < 0) {
          idx = tokens.length + token;
          if (idx >= 0) {
            return tokens[idx];
          }
        } else {
          return s;
        }
      }
      return fallback;
    };

    StringParserUtils.splitOnFirst = function(s, separator) {
      var idx;
      if (!S(s).isEmpty()) {
        if (!S(separator).isEmpty()) {
          idx = s.indexOf(separator);
          if (idx >= 0) {
            return [s.substring(0, idx), s.substring(idx + separator.length)];
          }
          return [s, s];
        }
        return [s, s];
      }
      return ['', ''];
    };

    StringParserUtils.splitOnLast = function(s, separator) {
      var idx;
      if (!S(s).isEmpty()) {
        if (!S(separator).isEmpty()) {
          idx = s.lastIndexOf(separator);
          if (idx >= 0) {
            return [s.substring(0, idx), s.substring(idx + separator.length)];
          }
          return [s, s];
        }
        return [s, s];
      }
      return ['', ''];
    };

    StringParserUtils.tokenReturnInputIfFail = function(s, separator, token) {
      return this.token(s, separator, token, s);
    };

    StringParserUtils.splitWithIgnoreRegions = function() {
      var boo, c, i, ignoreregions, irMatch, irStack, len, s, separators, splitted, tmp;
      s = arguments[0], separators = arguments[1], ignoreregions = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      if (separators == null) {
        throw new Error("separators");
      }
      if ((ignoreregions == null) || !_.any(ignoreregions)) {
        throw new Error("ignoreregions");
      }
      splitted = [];
      irStack = [];
      if (!S(s).isEmpty()) {
        tmp = '';
        for (i = 0, len = s.length; i < len; i++) {
          c = s[i];
          irMatch = _.first(ignoreregions, function(ir) {
            return ir.start === c;
          });
          boo = _.any(separators, (function(_this) {
            return function(sep) {
              return sep === c;
            };
          })(this));
          if (_.any(irStack) && irStack[0] === c) {
            irStack.pop();
            tmp += c;
          } else if (irMatch[0] != null) {
            irStack.push(irMatch[0].end);
            tmp += c;
          } else if (_.any(separators, (function(_this) {
            return function(sep) {
              return sep === c;
            };
          })(this)) && !_.any(irStack)) {
            splitted.push(tmp);
            tmp = '';
          } else {
            tmp += c;
          }
        }
        splitted.push(tmp);
        return splitted;
      }
      return [];
    };

    return StringParserUtils;

  })();

  IgnoreRegion = (function() {
    function IgnoreRegion(start, end) {
      this.start = start;
      this.end = end;
    }

    return IgnoreRegion;

  })();

  module.exports.spu = StringParserUtils;

  module.exports.ir = IgnoreRegion;

}).call(this);
