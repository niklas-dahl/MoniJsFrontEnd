// Generated by CoffeeScript 1.10.0
(function() {
  var S, TimeItem, _;

  _ = require('lodash');

  S = require('string');

  TimeItem = (function() {
    function TimeItem(hour1, minute) {
      this.hour = hour1;
      this.minute = minute != null ? minute : 0;
      if (this.hour > 24) {
        throw new Error("hour darf nicht größer als 24 sein");
      }
      if (this.hour < 0) {
        throw new Error("hour darf nicht kleiner als 0 sein");
      }
      if (this.minute > 60) {
        throw new Error("minute darf nicht größer als 60 sein");
      }
      if (this.minute < 0) {
        throw new Error("minute darf nicht kleiner als 0 sein");
      }
      if (this.minute > 60) {
        this.hour += 1;
        this.minute = 0;
      }
    }

    TimeItem.prototype.is_bigger_than = function(other) {
      if (this.hour === other.hour) {
        return this.minute > other.minute;
      } else {
        return this.hour > other.hour;
      }
    };

    TimeItem.prototype.is_smaller_than = function(other) {
      if (this.hour === other.hour) {
        return this.minute < other.minute;
      } else {
        return this.hour < other.hour;
      }
    };

    TimeItem.prototype.is_equal = function(other) {
      return this.hour === other.hour && this.minute === other.minute;
    };

    TimeItem.now = function() {
      var minutes, now;
      now = new Date();
      minutes = now.Minute - (now.Minute % 15);
      return new TimeItem(now.Hour, minutes);
    };

    TimeItem.prototype.is_between = function(from, to) {
      return this.is_bigger_than(from) && this.is_smaller_than(to);
    };

    TimeItem.parse = function(s) {
      var h, hour, hs, min, parts;
      if (!S(s).isEmpty()) {
        parts = _.select(s.split(':'), (function(_this) {
          return function(p) {
            return S(p).trim().s;
          };
        })(this));
        if (_.any(parts)) {
          hour = S(parts[0]).toInt();
          if (parts.length > 1) {
            min = S(parts[1]).toInt();
            return new TimeItem(hour, min);
          } else {
            if (hour > 100 && hour < 1000) {
              h = "" + hour;
              hs = h.slice(0, 1) + ":" + h.slice(1, 4);
              return TimeItem.parse(hs);
            } else if (hour > 100 && hour <= 2400) {
              h = "" + hour;
              hs = h.slice(0, 2) + ":" + h.slice(2, 5);
              return TimeItem.parse(hs);
            } else {
              return new TimeItem(hour, 0);
            }
          }
        }
      } else {
        return null;
      }
    };

    TimeItem.prototype.add = function(hours) {
      var minutes, partAfterKomma, partBeforeKomma;
      partBeforeKomma = Math.floor(hours);
      partAfterKomma = hours - partBeforeKomma;
      minutes = Math.round(partAfterKomma * 60) + this.minute;
      if (minutes >= 60) {
        partBeforeKomma++;
        minutes -= 60;
      }
      return new TimeItem(this.hour + partBeforeKomma, minutes);
    };

    TimeItem.prototype.subtract = function(hours) {
      var minutes, partAfterKomma, partBeforeKomma;
      partBeforeKomma = Math.floor(hours);
      partAfterKomma = hours - partBeforeKomma;
      minutes = this.minute - Math.round(partAfterKomma * 60);
      if (minutes < 0) {
        partBeforeKomma++;
        minutes += 60;
      }
      return new TimeItem(this.hour - partBeforeKomma, minutes);
    };

    TimeItem.difference = function(a, b) {
      var hours, minutes;
      if ((a != null) && (b != null)) {
        if (a.is_equal(b)) {
          return 0;
        }
        if (b.is_bigger_than(a)) {
          return this.difference(b, a);
        }
        if (a.hour === b.hour) {
          return (a.minute - b.minute) / 60;
        }
        minutes = 60 - b.minute + a.minute;
        hours = a.hour - b.hour - 1;
        return (hours * 60 + minutes) / 60;
      }
      return 0;
    };

    TimeItem.prototype.to_string = function() {
      var m;
      m = ("0" + this.minute).slice(-2);
      return this.hour + ":" + m;
    };

    TimeItem.prototype.to_monlist_string = function() {
      var h, m;
      h = ("0" + this.hour).slice(-2);
      m = ("0" + this.minute).slice(-2);
      return h + ":" + m;
    };

    TimeItem.prototype.to_short_string = function() {
      if (this.minute === 0) {
        return "" + this.hour;
      }
      return this.to_string();
    };

    return TimeItem;

  })();

  module.exports = TimeItem;

}).call(this);
