// Generated by CoffeeScript 1.10.0
(function() {
  var TimeItem, should;

  should = require('chai').should();

  TimeItem = require('../timeitem');

  describe('TimeItem', function() {
    describe('parse', function() {
      it('EmptyString_NoSuccess', function() {
        var ti;
        ti = TimeItem.parse("");
        return should.not.exist(ti);
      });
      it('OnlyHour_Success', function() {
        var ti;
        ti = TimeItem.parse("1");
        ti.hour.should.equal(1);
        return ti.minute.should.equal(0);
      });
      it('HourAndMinute_ParseIt', function() {
        var ti;
        ti = TimeItem.parse("1:2");
        ti.hour.should.equal(1);
        return ti.minute.should.equal(2);
      });
      it('HourAndMinuteNoColon-1_ParseIt', function() {
        var ti;
        ti = TimeItem.parse("1600");
        ti.hour.should.equal(16);
        return ti.minute.should.equal(0);
      });
      it('HourAndMinuteNoColon-2_ParseIt', function() {
        var ti;
        ti = TimeItem.parse("630");
        ti.hour.should.equal(6);
        return ti.minute.should.equal(30);
      });
      return it('OutOfRange_Throw', function() {
        should.Throw(function() {
          return TimeItem.parse("25:0");
        });
        should.Throw(function() {
          return TimeItem.parse("-1:0");
        });
        should.Throw(function() {
          return TimeItem.parse("0:61");
        });
        return should.Throw(function() {
          return TimeItem.parse("0:-1");
        });
      });
    });
    describe('add', function() {
      it('AddHours_Work', function() {
        var res, ti;
        ti = new TimeItem(1, 0);
        res = ti.add(1);
        res.hour.should.equal(2);
        return res.minute.should.equal(0);
      });
      it('AddMinutes_Work', function() {
        var res, ti;
        ti = new TimeItem(1, 0);
        res = ti.add(0.5);
        res.hour.should.equal(1);
        return res.minute.should.equal(30);
      });
      it('AddMinutes_HourOverflow_Work', function() {
        var res, ti;
        ti = new TimeItem(1, 30);
        res = ti.add(0.75);
        res.hour.should.equal(2);
        return res.minute.should.equal(15);
      });
      it('AddMinutesExact60_HourOverflow_Work', function() {
        var res, ti;
        ti = new TimeItem(1, 30);
        res = ti.add(0.5);
        res.hour.should.equal(2);
        return res.minute.should.equal(0);
      });
      it('AddHoursAndMinutes_Work', function() {
        var res, ti;
        ti = new TimeItem(1, 0);
        res = ti.add(1.5);
        res.hour.should.equal(2);
        return res.minute.should.equal(30);
      });
      return it('AddHoursInMinutes_Work', function() {
        var res, ti;
        ti = new TimeItem(1, 30);
        res = ti.add(1.5);
        res.hour.should.equal(3);
        return res.minute.should.equal(0);
      });
    });
    describe('subtract', function() {
      it('SubtractHours_Work', function() {
        var res, ti;
        ti = new TimeItem(2, 0);
        res = ti.subtract(1);
        res.hour.should.equal(1);
        return res.minute.should.equal(0);
      });
      it('SubtractMinutes_Work', function() {
        var res, ti;
        ti = new TimeItem(1, 0);
        res = ti.subtract(0.5);
        res.hour.should.equal(0);
        return res.minute.should.equal(30);
      });
      it('SubtractMinutes_HourOverflow_Work', function() {
        var res, ti;
        ti = new TimeItem(1, 30);
        res = ti.subtract(0.75);
        res.hour.should.equal(0);
        return res.minute.should.equal(45);
      });
      it('SubtractMinutesExact60_HourOverflow_Work', function() {
        var res, ti;
        ti = new TimeItem(1, 30);
        res = ti.subtract(0.5);
        res.hour.should.equal(1);
        return res.minute.should.equal(0);
      });
      it('SubtractHoursAndMinutes_Work', function() {
        var res, ti;
        ti = new TimeItem(4, 0);
        res = ti.subtract(1.5);
        res.hour.should.equal(2);
        return res.minute.should.equal(30);
      });
      it('SubtractHoursInMinutes_Work', function() {
        var res, ti;
        ti = new TimeItem(3, 30);
        res = ti.subtract(1.5);
        res.hour.should.equal(2);
        return res.minute.should.equal(0);
      });
      return it('OutOfRange_Fail', function() {
        var ti;
        return ti = new TimeItem(1, 0);
      });
    });
    describe('is_between', function() {
      it('InsideHourLevel_Work', function() {
        return new TimeItem(12).is_between(new TimeItem(11), new TimeItem(13)).should.be["true"];
      });
      it('InsideMinuteLevel_Work', function() {
        return new TimeItem(12).is_between(new TimeItem(11, 58), new TimeItem(12, 2)).should.be["true"];
      });
      it('OutsideHourLevel_Fail', function() {
        return new TimeItem(13).is_between(new TimeItem(11), new TimeItem(12)).should.be["false"];
      });
      return it('OutsideMinuteLevel_Fail', function() {
        return new TimeItem(13, 13).is_between(new TimeItem(11, 11), new TimeItem(12, 12)).should.be["false"];
      });
    });
    describe('compares', function() {
      it('IsSmaller_Works', function() {
        new TimeItem(10).is_smaller_than(new TimeItem(11)).should.be["true"];
        new TimeItem(10, 10).is_smaller_than(new TimeItem(10, 11)).should.be["true"];
        return new TimeItem(10, 10).is_smaller_than(new TimeItem(11, 9)).should.be["true"];
      });
      it('IsSmaller_WorksNot', function() {
        new TimeItem(11).is_smaller_than(new TimeItem(10)).should.be["false"];
        new TimeItem(10, 11).is_smaller_than(new TimeItem(10, 10)).should.be["false"];
        return new TimeItem(11, 9).is_smaller_than(new TimeItem(10, 10)).should.be["false"];
      });
      it('IsBigger_Works', function() {
        new TimeItem(11).is_bigger_than(new TimeItem(10)).should.be["true"];
        new TimeItem(10, 11).is_bigger_than(new TimeItem(10, 10)).should.be["true"];
        return new TimeItem(11, 9).is_bigger_than(new TimeItem(10, 10)).should.be["true"];
      });
      return it('IsEqual_Works', function() {
        new TimeItem(10).is_equal(new TimeItem(10)).should.be["true"];
        return new TimeItem(10, 10).is_equal(new TimeItem(10, 10)).should.be["true"];
      });
    });
    describe('diff', function() {
      it('Calc_DoitRight_1', function() {
        return TimeItem.difference(new TimeItem(1, 1), new TimeItem(1, 1)).should.be.equal(0);
      });
      it('Calc_DoitRight_2', function() {
        return TimeItem.difference(new TimeItem(1, 0), new TimeItem(1, 30)).should.be.equal(0.5);
      });
      it('Calc_DoitRight_3', function() {
        return TimeItem.difference(new TimeItem(1, 30), new TimeItem(1, 0)).should.be.equal(0.5);
      });
      it('Calc_DoitRight_4', function() {
        return TimeItem.difference(new TimeItem(1, 0), new TimeItem(2, 30)).should.be.equal(1.5);
      });
      it('Calc_DoitRight_5', function() {
        return TimeItem.difference(new TimeItem(1, 40), new TimeItem(2, 10)).should.be.equal(0.5);
      });
      return it('Calc_DoitRight_6', function() {
        return TimeItem.difference(new TimeItem(2, 10), new TimeItem(1, 40)).should.be.equal(0.5);
      });
    });
    describe('to_monlist_string', function() {
      it('normal', function() {
        return new TimeItem(10, 10).to_monlist_string().should.be.equal("10:10");
      });
      return it('leading zeros', function() {
        return new TimeItem(1, 1).to_monlist_string().should.be.equal("01:01");
      });
    });
    describe('to_string', function() {
      it('normal', function() {
        return new TimeItem(10, 10).to_string().should.be.equal("10:10");
      });
      return it('no leading zeros', function() {
        return new TimeItem(1, 1).to_string().should.be.equal("1:01");
      });
    });
    return describe('to_short_string', function() {
      it('normal', function() {
        return new TimeItem(10, 10).to_short_string().should.be.equal("10:10");
      });
      it('no leading zeros', function() {
        return new TimeItem(1, 1).to_short_string().should.be.equal("1:01");
      });
      return it('no minute', function() {
        return new TimeItem(1, 0).to_short_string().should.be.equal("1");
      });
    });
  });

}).call(this);
